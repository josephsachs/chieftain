{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"text-",
				"text-orientation"
			],
			[
				"ali",
				"vertical-align"
			],
			[
				"address",
				"address_line_2"
			],
			[
				"inline",
				"inline-block"
			],
			[
				"Patient",
				"PatientSexChoice"
			]
		]
	},
	"buffers":
	[
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 1057,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAIQQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/index.css",
			"settings":
			{
				"buffer_size": 425,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAqQEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/App.tsx",
			"settings":
			{
				"buffer_size": 185,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/index.tsx",
			"settings":
			{
				"buffer_size": 273,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/components/GameArea.tsx",
			"settings":
			{
				"buffer_size": 6830,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import { useState, useEffect, useRef } from 'react"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAA2BcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"paste",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAADYFwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"paste",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAACcGQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAbhsAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAQhoAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "MapZone"
					},
					"CAAAAC8KAAAAAAAAMAoAAAAAAAAAAAAAMAoAAAAAAAAwCgAAAAAAAAgAAABtYXBfem9uZTAKAAAAAAAAMQoAAAAAAAAAAAAAMQoAAAAAAAAyCgAAAAAAAAAAAAAyCgAAAAAAADMKAAAAAAAAAAAAADMKAAAAAAAANAoAAAAAAAAAAAAANAoAAAAAAAA1CgAAAAAAAAAAAAA1CgAAAAAAADYKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwoAAAAAAAA3CgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/components/GameMap.tsx",
			"settings":
			{
				"buffer_size": 8486,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import { useRef, useEffect, useState, useCallback"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAxxkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAxxkAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAExoAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAfRsAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAFxoAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAXRoAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAXRoAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAXRoAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAjhsAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAsywAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAEwsAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAACYhAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Searching 37918 files for \"map_zone\" (regex)\n\n~/Documents/dev/chieftain/client/node_modules/.cache/babel-loader/fbd9561aa63ebb3c2c63bbad5b0451043a1d32fc52ef7dbdc99f5bdabe503ecb.json:\n    1: <skipped 2255 characters> ...       // Now connect down socket\\n            connectDownSocket(connId);\\n          } else if (message.type === 'sync' && message.data) {\\n            if (message.data.entities) {\\n              addMessage(`Received ${message.data.entities.length} entities from sync`);\\n              // Filter for map_zone entities\\n              const mapZones = message.data.entities.filter(e => e.type === 'map_zone');\\n              setMapData(mapZones);\\n              addMessage(`Found ${mapZones.length} map zones`);\\n            }\\n          }\\n        } catch (e) {\\n          addMessage(`Error parsing up socket message: ${e instanceof Error ? e.message : 'Unknown error'}`);\\n        }\\n      };\\n      ws.o... <skipped 1246 characters> ...ssage('Down socket confirmed');\\n          } else if (message.type === 'update_batch' && message.updates) {\\n            const updateCount = Object.keys(message.updates).length;\\n            addMessage(`Received batch update with ${updateCount} entities`);\\n\\n            // Update map data with any map_zone updates\\n            Object.values(message.updates).forEach(update => {\\n              if (update.type === 'map_zone') {\\n                setMapData(prev => {\\n                  const newData = [...prev];\\n                  const index = newData.findIndex(zone => zone._id === update._id);\\n                  if (index >= 0) {\\n                    newData[index] = update;\\n                  } else {\\n              ... <skipped 6621 characters> ...       // Now connect down socket\\n            connectDownSocket(connId);\\n          } else if (message.type === 'sync' && message.data) {\\n            if (message.data.entities) {\\n              addMessage(`Received ${message.data.entities.length} entities from sync`);\\n              // Filter for map_zone entities\\n              const mapZones = message.data.entities.filter((e: any) => e.type === 'map_zone');\\n              setMapData(mapZones);\\n              addMessage(`Found ${mapZones.length} map zones`);\\n            }\\n          }\\n        } catch (e) {\\n          addMessage(`Error parsing up socket message: ${e instanceof Error ? e.message : 'Unknown error'}`);\\n        }\\n      };\\n\\n      ws... <skipped 1290 characters> ...socket confirmed');\\n          } else if (message.type === 'update_batch' && message.updates) {\\n            const updateCount = Object.keys(message.updates).length;\\n            addMessage(`Received batch update with ${updateCount} entities`);\\n            \\n            // Update map data with any map_zone updates\\n            Object.values(message.updates).forEach((update: any) => {\\n              if (update.type === 'map_zone') {\\n                setMapData(prev => {\\n                  const newData = [...prev];\\n                  const index = newData.findIndex(zone => zone._id === update._id);\\n                  if (index >= 0) {\\n                    newData[index] = update;\\n                  } else {\\n              ... <skipped 8403 characters> ...\n\n~/Documents/dev/chieftain/client/node_modules/.cache/default-development/1.pack:\n    <binary>\n\n~/Documents/dev/chieftain/client/node_modules/.cache/default-development/13.pack:\n    <binary>\n\n~/Documents/dev/chieftain/client/node_modules/.cache/default-development/2.pack:\n    <binary>\n\n~/Documents/dev/chieftain/client/node_modules/.cache/default-development/5.pack:\n    <binary>\n\n~/Documents/dev/chieftain/client/src/components/GameArea.tsx:\n   77              if (message.data.entities) {\n   78                addMessage(`Received ${message.data.entities.length} entities from sync`);\n   79:               // Filter for map_zone entities\n   80:               const mapZones = message.data.entities.filter((e: any) => e.type === 'map_zone');\n   81                setMapData(mapZones);\n   82                addMessage(`Found ${mapZones.length} map zones`);\n   ..\n  131              addMessage(`Received batch update with ${updateCount} entities`);\n  132              \n  133:             // Update map data with any map_zone updates\n  134              Object.values(message.updates).forEach((update: any) => {\n  135:               if (update.type === 'map_zone') {\n  136                  setMapData(prev => {\n  137                    const newData = [...prev];\n\n228 matches across 6 files\n",
			"settings":
			{
				"buffer_size": 4513,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/components/MapRenderer.ts",
			"settings":
			{
				"buffer_size": 5333,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "interface MapZone {"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAA1RQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"json",
				"JSON Reindent: reindent file or selection"
			],
			[
				"python",
				"Start Python Live Coding"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"package",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/josephsachs/Documents/dev/chieftain/client",
		"/Users/josephsachs/Documents/dev/chieftain/client/public",
		"/Users/josephsachs/Documents/dev/chieftain/client/src",
		"/Users/josephsachs/Documents/dev/chieftain/client/src/components"
	],
	"file_history":
	[
		"/Users/josephsachs/Documents/dev/chieftain/client/src/App.tsx",
		"/Users/josephsachs/Documents/dev/chieftain/client/src/index.tsx",
		"/Users/josephsachs/Documents/dev/chieftain/client/public/index.html",
		"/Users/josephsachs/Documents/dev/clickedin/index.html",
		"/Users/josephsachs/Desktop/pseudo-linkedin.html",
		"/Users/josephsachs/Documents/dev/authservice-server-src/package.json",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/config/iceandfire-common.toml",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/config/incontrol/spawn.json",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/config/epicsiegemod-common.toml",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/config/grimoireofgaia-spawning.toml",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/config/grimoireofgaia-common.toml",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/config/twilightforest-common.toml",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/config/incontrol/summonaid.json",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/config/incontrol/spawner.json",
		"/Users/josephsachs/Documents/curseforge/minecraft/Instances/Dark Continent/epicsiegemod.toml",
		"/Users/josephsachs/IdleFantasyGPT/Assets/Utils/ChatGPTAPI.cs",
		"/Users/josephsachs/Documents/dev/minare/.gitignore",
		"/Users/josephsachs/Documents/dev/minare/start.sh",
		"/Users/josephsachs/Documents/dev/project-minare/vertx/src/main/java/com/minare/controller/WebSocketController.java",
		"/Users/josephsachs/Documents/dev/project-minare/start.sh",
		"/Users/josephsachs/Documents/dev/project-minare/vertx/src/main/java/com/minare/scenario/MapBuilder.java",
		"/Users/josephsachs/Documents/dev/project-minare/vertx/src/main/java/com/minare/world/RandomNumberHandler.java",
		"/Users/josephsachs/Documents/dev/project-minare/vertx/src/main/java/com/minare/controller/MapViewController.java",
		"/Users/josephsachs/Documents/dev/project-minare/vertx/src/main/java/com/minare/controller/HelloController.java",
		"/Users/josephsachs/Documents/dev/project-minare/vertx/src/main/java/com/minare/MainVerticle.java",
		"/Users/josephsachs/Documents/dev/project-minare/vertx/start-vertx.sh",
		"/Users/josephsachs/Documents/dev/project-minare/.gitignore",
		"/Users/josephsachs/Documents/dev/project-minare/vertx/pom.xml",
		"/Users/josephsachs/Downloads/generated-lorebook-v2.lorebook",
		"/Users/josephsachs/Downloads/Example.lorebook.json",
		"/Users/josephsachs/Downloads/generated-lorebook.json",
		"/Users/josephsachs/Documents/dev/setup_psyche.sh",
		"/Users/josephsachs/Documents/dev/psyche/psyche/src/index.js",
		"/Users/josephsachs/PsycheV1/Assets/Core/Mindlet.cs",
		"/Users/josephsachs/PsycheV1/Assets/Core/IController.cs",
		"/Users/josephsachs/PsycheV1/Assets/Core/CoreController.cs",
		"/Users/josephsachs/Documents/tokyopicnic-tropes.html",
		"/Users/josephsachs/IdleFantasyGPT/Assets/Configs/openai-api.json",
		"/Users/josephsachs/Documents/dev/muds/eclipse/typeclasses/characters.py",
		"/Users/josephsachs/Documents/dev/muds/eclipse/commands/cmd_skills.py",
		"/Users/josephsachs/Documents/dev/muds/eclipse/world/world_data.json",
		"/Users/josephsachs/Documents/dev/muds/eclipse/reset.sh",
		"/Users/josephsachs/Documents/dev/muds/nereids/typeclasses/npc_builder.py",
		"/Users/josephsachs/Documents/dev/muds/nereids/typeclasses/npc.py",
		"/Users/josephsachs/Documents/dev/langchain-tutorial/tutorial1.py",
		"/Users/josephsachs/Documents/dev/langchain-tutorial/tutorial2.py",
		"/Users/josephsachs/Documents/dev/langchain-tutorial/.env",
		"/Users/josephsachs/Documents/dev/langchain-tutorial/alphavantage_test.py",
		"/Users/josephsachs/Library/Application Support/Sublime Text 3/Packages/User/langchain-tutorial-python.sublime-build",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/typeclasses/Aamir,Aaron,Abbey,Abbie,Abbot,Abbott,Abby,Abdel,Ab",
		"/Users/josephsachs/Documents/dev/eclipse-wanderers/package.json",
		"/Users/josephsachs/Documents/Paradox Interactive/Crusader Kings III/mod/xaxia.mod",
		"/Users/josephsachs/Documents/Paradox Interactive/Crusader Kings III/mod/xaxia(1).mod",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/world/test.py",
		"/Users/josephsachs/Documents/dev/muds/station-to-station/world/test.py",
		"/Users/josephsachs/Documents/dev/muds/station-to-station/world/boilerplate.py",
		"/Users/josephsachs/Documents/dev/meathooks-js/params.json",
		"/Users/josephsachs/Documents/dev/meathooks-js/index.js",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/typeclasses/generators/language_models/language_model.py",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/world/scripts.py",
		"/Users/josephsachs/Documents/dev/gala-eclipse/codedeploy/copy_src.sh",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/typeclasses/generators.py",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/world/language_model.py",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/world/nai_api.py",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/typeclasses/dialog.py",
		"/Users/josephsachs/Documents/dev/gala-eclipse/src/typeclasses/NPC.py",
		"/Users/josephsachs/Documents/dev/gala-eclipse/codedeploy/reload_evennia.sh",
		"/Users/josephsachs/Documents/dev/gala-eclipse/appspec.yml",
		"/Users/josephsachs/Documents/dev/gala-eclipse/README.md",
		"/Users/josephsachs/Documents/dev/evennia-aws/appspec.yml",
		"/Users/josephsachs/Documents/dev/evennia-aws/codedeploy/reload_evennia.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/codedeploy/copy_src.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/cloudformation/main.yml",
		"/Users/josephsachs/Documents/dev/gala-eclipse/codedeploy/install.sh",
		"/Users/josephsachs/Documents/dev/gala-eclipse/launch-data/start_evennia.sh",
		"/Users/josephsachs/Documents/dev/gala-eclipse/codedeploy/restart_server.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/launch-data/start_evennia.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/codedeploy/install.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/README.md",
		"/Users/josephsachs/Documents/dev/gala-eclipse/launch-data/setup_extras.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/src/.gitignore",
		"/Users/josephsachs/Documents/dev/evennia-aws/.gitignore",
		"/Users/josephsachs/Documents/dev/evennia-aws/launch-data/install_evennia.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/launch-data/provision.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/launch-data/install_python3.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/launch-data/setup_extras.sh",
		"/Users/josephsachs/Documents/dev/evennia-aws/codedeploy-scripts/restart_server.sh",
		"/Users/josephsachs/Documents/dev/evennia-ai/cloudformation/create_venv.sh",
		"/Users/josephsachs/Documents/dev/evennia-ai/cloudformation/install_pip.sh",
		"/Users/josephsachs/Documents/dev/evennia-ai/cloudformation/master.yml",
		"/Users/josephsachs/Documents/dev/evennia-ai/cloudformation/pipeline.yml",
		"/Users/josephsachs/Documents/dev/evennia-ai/cloudformation/create_evennia_project.sh",
		"/Users/josephsachs/Documents/dev/evennia-ai/cloudformation/master2.yml",
		"/Users/josephsachs/Downloads/hazulog",
		"/Users/josephsachs/Documents/dev/meathooks/index2.js",
		"/Users/josephsachs/Documents/dev/novelai-api/.pre-commit-config.yaml",
		"/Users/josephsachs/Documents/dev/novelai-api/README.md",
		"/Users/josephsachs/Documents/dev/meathooks/package-lock.json",
		"/Users/josephsachs/Documents/Paradox Interactive/Crusader Kings III/mod/Grail.mod",
		"/Users/josephsachs/Documents/Paradox Interactive/Crusader Kings III/mod/ugc_2253278582.mod",
		"/Users/josephsachs/Documents/Paradox Interactive/Crusader Kings III/mod/ugc_2241203093.mod",
		"/Users/josephsachs/Documents/Paradox Interactive/Crusader Kings III/mod/ugc_2524797018.mod",
		"/Users/josephsachs/Documents/Paradox Interactive/Crusader Kings III/mod/Grail/descriptor.mod",
		"/Users/josephsachs/Desktop/rpgm-parsing-tool.html",
		"/Users/josephsachs/Desktop/Map001-JP.json",
		"/Users/josephsachs/Library/Application Support/Steam/steamapps/common/Europa Universalis IV/localisation/countries_l_english.yml",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/common/countries/Colombia.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/history/countries/COL - Colombia.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done.mod",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/common/country_tags/00_countries.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/customizable_localization/00_start_screen.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/customizable_localization/00_customizable_localization.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/common/scripted_triggers/00_scripted_triggers_FR.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/localisation/converted_heresies_l_english.yml",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/customizable_localization/ZZZ_added_converter_customizable_localization.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/Shirazid/common/country_tags/00_countries.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/Shirazid/localisation/replace/converter_l_english.yml",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/Shirazid/localisation/xyu_ideas_l_english.yml",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/Shirazid/common/ideas/01_extra_ideas_b.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/Shirazid/common/scripted_triggers/00_scripted_triggers_FR.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/Shirazid/history/countries/BRZ - Brazil.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/Shirazid/common/countries/x_x_2232.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/Shirazid/common/countries/x_x_2775.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/localisation/xyu_ideas_l_english.yml",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/common/ideas/01_extra_ideas_b.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/common/custom_ideas/00_adm_custom_ideas.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/common/religions/99_converted_dynamic_faith_107-from-shiite.txt",
		"/Users/josephsachs/Documents/Paradox Interactive/Europa Universalis IV/mod/1437_04_29_Done/common/ideas/00_basic_ideas.txt"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 98.0,
		"where_history":
		[
			"/Users/josephsachs/Documents/dev/chieftain/client,<project filters>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"map_zone"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": false,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1057,
						"regions":
						{
						},
						"selection":
						[
							[
								1057,
								1057
							]
						],
						"settings":
						{
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/index.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 425,
						"regions":
						{
						},
						"selection":
						[
							[
								425,
								425
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/App.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 185,
						"regions":
						{
						},
						"selection":
						[
							[
								185,
								185
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/index.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 273,
						"regions":
						{
						},
						"selection":
						[
							[
								273,
								273
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/components/GameArea.tsx",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6830,
						"regions":
						{
						},
						"selection":
						[
							[
								2617,
								2617
							]
						],
						"settings":
						{
							"auto_name": "import { useState, useEffect, useRef } from 'react",
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2401.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/components/GameMap.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8486,
						"regions":
						{
						},
						"selection":
						[
							[
								6958,
								6958
							]
						],
						"settings":
						{
							"auto_name": "import { useRef, useEffect, useState, useCallback",
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4513,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										519,
										527
									],
									[
										615,
										623
									],
									[
										1256,
										1264
									],
									[
										1373,
										1381
									],
									[
										2014,
										2022
									],
									[
										2117,
										2125
									],
									[
										2758,
										2766
									],
									[
										2882,
										2890
									],
									[
										3847,
										3855
									],
									[
										3956,
										3964
									],
									[
										4240,
										4248
									],
									[
										4376,
										4384
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								3905,
								3905
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 202.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/components/MapRenderer.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5333,
						"regions":
						{
						},
						"selection":
						[
							[
								4575,
								4575
							]
						],
						"settings":
						{
							"auto_name": "interface MapZone {",
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 377.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/langchain-tutorial-python.sublime-build",
	"project": "chieftain-client.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 501.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 264.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
